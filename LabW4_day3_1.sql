USE sakila;

-- Write SQL queries to perform the following tasks using the Sakila database:
-- List the number of films per category.
SELECT cat.name, COUNT(fcat.film_id) FROM sakila.category AS cat
JOIN  sakila.film_category AS fcat
ON cat.category_id = fcat.category_id
GROUP BY cat.name;

-- Retrieve the store ID, city, and country for each store.
SELECT s.store_ID, city.city, country.country FROM sakila.store AS s
JOIN sakila.address AS ad
ON s.address_id = ad.address_id
JOIN sakila.city AS city
ON ad.city_id = city.city_id
JOIN sakila.country AS country
ON city.country_id =country.country_id;

-- Calculate the total revenue generated by each store in dollars.
SELECT s.store_ID, sum(p.amount) FROM sakila.store AS s
RIGHT JOIN sakila.customer AS cust
ON s.store_id = cust.store_id
LEFT JOIN sakila.payment AS p
ON cust.customer_id =p.customer_id
GROUP BY s.store_ID;

SELECT * FROM sakila.store;

-- Determine the average running time of films for each category.
SELECT cat.name, AVG(f.length) FROM sakila.category AS cat
JOIN  sakila.film_category AS fcat
ON cat.category_id = fcat.category_id
JOIN sakila.film AS f
ON fcat.film_id = f.film_id
GROUP BY cat.name;

-- Identify the film categories with the longest average running time. -- to redo
SELECT cat.name, AVG(f.length) FROM sakila.category AS cat
JOIN  sakila.film_category AS fcat
ON cat.category_id = fcat.category_id
JOIN sakila.film AS f
ON fcat.film_id = f.film_id
GROUP BY cat.name
ORDER BY AVG(f.length) DESC LIMIT 1;


-- Display the top 10 most frequently rented movies in descending order.

SELECT f.title, count(r.rental_id) AS count_rental FROM sakila.film AS f
JOIN sakila.inventory AS i
ON f.film_id = i.film_id
JOIN sakila.rental AS r
ON i.inventory_id = r.inventory_id
GROUP BY f.title
ORDER BY count_rental DESC LIMIT 10;

-- Determine if "Academy Dinosaur" can be rented from Store 1.
SELECT f.title, s.store_id FROM sakila.film AS f
JOIN sakila.inventory AS i
ON f.film_id = i.film_id
JOIN sakila.store AS s
ON i.store_id = s.store_id
WHERE s.store_id = 1 AND f.title LIKE '%Academy Dinosaur%';

-- Provide a list of all distinct film titles, along with their availability status in the inventory. 
-- Include a column indicating whether each title is 'Available' or 'NOT available.' 
-- Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL."
SELECT DISTINCT f.title,
CASE WHEN ISNULL(i.film_id) = 0 THEN 'Available'
WHEN ISNULL(i.film_id) = 1 THEN 'NOT available'
ELSE 'unknown' END AS availability_status
FROM sakila.film AS f
left JOIN sakila.inventory AS i
ON f.film_id = i.film_id;
